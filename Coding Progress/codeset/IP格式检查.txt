	//single IP/MASK check eg. 192.168.6.123/23
//	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/([1-9]|[1-2][0-9]|30)$";

	//multi IP/MASK check eg. 192.168.6.23-192.168.6.123

//	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])-([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/([1-9]|[1-2][0-9]|30)$";

//	char teststring[] = "1.168.199.123/1";
	char teststring[] = "1.168.199.123-123.168.199.123/1";


IP与掩码的格式检查――公共模块

接口中的IP

单IP
"^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])$"

IP范围
"^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])-([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])$"

后续进行大于小于判断


掩码（点分十进制）
同IP但是后续再利用程序进行掩码格式判断

掩码（前缀）
"^([1-9]|[1-2][0-9]|30)$"


IP组中的IP

IP段定义
只需要判断是正确的IP即可
如：1.1.1.1-10.10.10.10
判断大小，掩码的概念和接口不一样


单IP/掩码  （点分十进制与前缀）

	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/(([1-9]|[1-2][0-9]|30)|([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]))$";


IP范围/掩码  （点分十进制与前缀）  192.168.6.123-192.168.6.123/23 or 192.168.6.123-192.168.6.123/192.168.6.123

"^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])-([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/(([1-9]|[1-2][0-9]|30)|([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]))$"





正整数

^[1-9][0-9]*$



在线调试网站

http://www.shucunwang.com/RunCode/cpp/






==========================================================C++ code！！=============start=============================



#include <iostream>
#include <set>
#include <algorithm>
#include <iterator>  
#include <string>

#include<regex.h>
// #include<regex>

using namespace std;
 
int main(int argc, char** argv) 
{
    regmatch_t pmatch[1];
	int cflags = REG_EXTENDED;
	regex_t reg;
//	char pattern[] = "eth[0-7]"; //for 1000M
	//single IP/MASK check eg. 192.168.6.123/23
//	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/([1-9]|[1-2][0-9]|30)$";

	//multi IP/MASK check eg. 192.168.6.123-192.168.6.123/23!

//	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])-([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/([1-9]|[1-2][0-9]|30)$";

	//single IP/MASK check eg. 1.168.199.0/1.123.123.0 and 192.168.6.123/23
//	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/(([1-9]|[1-2][0-9]|30)|([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]))$";

	//multi IP/MASK check eg. 192.168.6.123-192.168.6.123/23 and 192.168.6.123-192.168.6.123/1.123.123.0
	char pattern[] = "^([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])-([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])/(([1-9]|[1-2][0-9]|30)|([1-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]))$";


	//	    	char *pattern="eth[0-9]";//for 10000M
//	char teststring[] = "1.168.199.123/1";
//	char teststring[] = "1.168.199.123-123.168.199.123/1";
	char teststring[] = "1.168.199.0-1.168.199.0/32";

	regcomp(&reg, pattern, cflags);
	int status = regexec(&reg, teststring, 1, pmatch, 0);
	if (!status) {
		cout << "Matched !" << endl;
	} else {
		cout << "No Matched !" << endl;
	}
     
    return 0;
}





==========================================================C++ code！！=========end=================================


IP配置的格式检查

按行检查，(单IP，IP范围)/（点分十进制，前缀）

方式一：

1.以“，”分割
2.寻找“-”
有，则正则（IP范围)/（点分十进制，前缀）
	匹配，则按“/”分割，取出起止IP
		寻找“.”,确认掩码的形式
	不匹配，报错（此时已经确认IP的格式是正确的，只是逻辑可能有错罢了）
无，则正则（单IP)/（点分十进制，前缀）
	匹配，则按“/”分割，取出IP
		寻找“.”,确认掩码的形式
	不匹配，报错


方式二：

1.以“，”分割
2.寻找“/”
	有，继续
		以“/”分割，取出IP与掩码， 
			IP：寻找“-”，判断IP形式
				有，正则判断，（IP范围），取出起止IP
				无，正则判断，（单IP）
			Mask：寻找“.”,判断Mask形式
				有，正则判断，点分十进制
				无，正则判断，前缀形式				
	无，退出



添加Route模块（模块代码：11）的步骤

1.在module文件夹下面，新建一个模块文件夹route
2.在WFGN\CME\cfgsvr\basecom\include\Module.h下，将加入的模块信息加进去
2.添加Makefile、libroutemod.cpp、RouteMod.cpp、RouteMod.h，按照以前的模块进行修改
3.修改module文件夹下面的Makefile，添加对route文件夹的编译
4.修改build.sh文件，使用modreg注册RouteMod，/usr/bin/SecHome/modreg -i /usr/lib/SecHome/libroutemod.so





#include <iostream>
#include <set>
#include <algorithm>
#include <iterator>  
#include <string>

#include<regex.h>
// #include<regex>

using namespace std;
 
int main(int argc, char** argv) 
{
    regmatch_t pmatch[1];
	int cflags = REG_EXTENDED;
	regex_t reg;

	//char pattern[] = "^[0-9A-Za-z\\-_\\.:]+$";
	char pattern[] = "^[0-9a-zA-Z_\\.\\-]*[:]*[0-9a-zA-Z_\\.\\-]*$";

	//char teststring[] = "cd.58.xx-net.com808";
	char teststring[] = "wdasdgshDFFGGBHNGB";

	regcomp(&reg, pattern, cflags);
	int status = regexec(&reg, teststring, 1, pmatch, 0);
	if (!status) {
		cout << "Matched !" << endl;
	} else {
		cout << "No Matched !" << endl;
	}
     
    return 0;
}


