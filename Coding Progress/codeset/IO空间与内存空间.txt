https://blog.csdn.net/zf_c_cqupt/article/details/52321861
I/O空间、内存空间以及Linux内存管理

https://blog.csdn.net/RadianceBlau/article/details/81608729
PCIe的内存地址空间、I/O地址空间和配置地址空间

https://blog.csdn.net/darennet/article/details/40521015
设备地址与IO内存映射



IO地址是CPU读写外部设备时使用的地址。
内存地址是CPU读写内存(括REM和ROM)时使用的地址。
多数精简指令CPU不区分访问的是内存还是外设，使用统一的指令和统一的地址空间去访问外设和内存。――统一地址空间编址
在这种情况下，需要译码电路把所有的外设I/O地址和内存地址按照规则安排在一个空间里，学惯了X86CPU的也可把这叫作I/O地址映射成内存地址空间吧，虽然实际上这些CPU并没有I/O地址空间和内存地址空间的概念。
并不是所有的体系结构都有IO空间这个定义的，我所了解的只有X86体系上有，而ARM体系结构就没有这种区别，在X86上IO空间和内存是独立的，他们各自有各自的总线，并且IO空间一般是64K，即16位内存空间为4G，可见他们的差别是很大。

http://www.51hei.com/mcu/2656.html
51单片机特殊功能寄存器（SFR）介绍

位寻址――可以对寄存器的某一位进行操作


对于单片机的程序执行时指令和数据的存放与读取，理解如下：
对单片机编程后，程序的代码段，data段，bss段，rodata段等都存放在Flash中。当单片机上电后，初始化汇编代码将data段，bss段，复制到RAM中，并建立好堆栈，开始调用程序的main函数。以后，便有了程序存储器，和数据存储器之分，运行时从Flash（即指令存储器，代码存储器）中读取指令 ，从RAM中读取与写入数据。RAM存在的意义就在于速度更快。
无论是单片机也好，PC也罢，存在的存储器金字塔都是一致的，速度的因素，成本的限制导致了一级级更快的存储器的更快速度与更高的成本。应该说，对于它们的理解，就是存储器金字塔的理解。



https://blog.csdn.net/u012142460/article/details/78932165
详解应用层open函数如何调用到底层驱动中xxx_open函数

https://blog.csdn.net/damotiansheng/article/details/44833655
Linux设备驱动之mmap设备操作(memdev.c字符设备驱动分析)