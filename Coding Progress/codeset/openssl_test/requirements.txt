OpenSSL算法测试

OpenSSL 是一个开源项目，其组成主要包括一下三个组件：

openssl：多用途的命令行工具

libcrypto：加密算法库

libssl：加密模块应用库，实现了ssl及tls

openssl可以实现：秘钥证书管理、对称加密和非对称加密 。


设计需求：

加密算法 + 填充模式

摘要算法

对称加密
OpenSSL一共提供了8种对称加密算法，其中7种是分组加密算法，仅有的一种流加密算法是RC4。这7种分组加密算法分别是AES、DES、Blowfish、CAST、IDEA、RC2、RC5，都支持电子密码本模式（ECB）、加密分组链接模式（CBC）、加密反馈模式（CFB）和输出反馈模式（OFB）四种常用的分组密码加密模式。其中，AES使用的加密反馈模式（CFB）和输出反馈模式（OFB）分组长度是128位，其它算法使用的则是64位。事实上，DES算法里面不仅仅是常用的DES算法，还支持三个密钥和两个密钥3DES算法。

非对称加密
OpenSSL一共实现了4种非对称加密算法，包括DH算法、RSA算法、DSA算法和椭圆曲线算法（EC）。DH算法一般用于密钥交换。RSA算法既可以用于密钥交换，也可以用于数字签名，当然，如果你能够忍受其缓慢的速度，那么也可以用于数据加密。DSA算法则一般只用于数字签名。

信息摘要（单向加密）
OpenSSL实现了5种信息摘要算法，分别是MD2、MD5、MDC2、SHA（SHA1）和RIPEMD。SHA算法事实上包括了SHA和SHA1两种信息摘要算法。此外，OpenSSL还实现了DSS标准中规定的两种信息摘要算法DSS和DSS1。


支持的算法：

AES是加密的算法，使用128、192 和 256 位密钥，将被加密数据划分为128位（16字节）一块，然后使用某种加密模式进行加密。

1、主要的加密模式有以下几种：
ECB模式
按照块密码的块大小被分为数个块，并对每个块进行独立加密。
　　优点:
　　1.简单；
　　2.有利于并行计算；
　　3.误差不会被传送；
　　缺点:
　　1.不能隐藏明文的模式；
　　2.可能对明文进行主动攻击；

CBC模式：
每个平文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有平文块。
同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。
　　优点：
　　1.不容易主动攻击,安全性好于ECB,适合传输长度长的报文,是SSL、IPSec的标准。
　　缺点：
　　1.不利于并行计算；
　　2.误差传递；
　　3.需要初始化向量IV

CFB模式：
模式类似于CBC，可以将块密码变为自同步的流密码。
　　优点：
　　1.隐藏了明文模式;
　　2.分组密码转化为流模式;
　　3.可以及时加密传送小于分组的数据;
　　缺点:
　　1.不利于并行计算;
　　2.误差传送：一个明文单元损坏影响多个单元;
　　3.唯一的IV;

OFB模式：
可以将块密码变成同步的流密码。它产生密钥流的块，然后将其与平文块进行异或，得到密文。
　　优点:
　　1.隐藏了明文模式;
　　2.分组密码转化为流模式;
　　3.可以及时加密传送小于分组的数据;
　　缺点:
　　1.不利于并行计算;
　　2.对明文的主动攻击是可能的;
　　3.误差传送：一个明文单元损坏影响多个单元;

PCBC模式
略
CTR模式
略

在我的代码中使用的是最简单的ecb模式。

 

2、由于被加密数据分组时，有可能不会正好为128bit的整数倍，所以需要padding(填充补齐)，而padding模式有以下几种：

None //不填充。
PKCS7 //填充字符串由一个字节序列组成，每个字节填充该字节序列的长度。
Zeros //填充字符串由设置为零的字节组成。
ANSIX923 //ANSIX923 填充字符串由一个字节序列组成，此字节序列的最后一个字节填充字节序列的长度，其余字节均填充数字零。
ISO10126 //ISO10126 填充字符串由一个字节序列组成，此字节序列的最后一个字节填充字节序列的长度，其余字节填充随机数据。





AES ―― cfb、cbc、ECB、ofb、fcbc

支持的padding填充模式

算法/模式/填充			16字节加密后数据长度			不满16字节加密后长度 
AES/CBC/NoPadding				16						不支持 
AES/CBC/PKCS5Padding				32						16 
AES/CBC/ISO10126Padding			32						16 
AES/CFB/NoPadding				16						原始数据长度 
AES/CFB/PKCS5Padding				32						16 
AES/CFB/ISO10126Padding			32						16 
AES/ECB/NoPadding				16						不支持 
AES/ECB/PKCS5Padding				32						16 
AES/ECB/ISO10126Padding			32						16 
AES/OFB/NoPadding				16						原始数据长度 
AES/OFB/PKCS5Padding				32						16 
AES/OFB/ISO10126Padding			32						16 
AES/PCBC/NoPadding				16						不支持 
AES/PCBC/PKCS5Padding			32						16 
AES/PCBC/ISO10126Padding			32						16

PKCS7Padding


可以看到，在原始数据长度为16的整数倍时，假如原始数据长度等于16*n，则使用NoPadding时加密后数据长度等于16*n，其它情况下加密数据长度等于16*(n+1)。在不足16的整数倍的情况下，假如原始数据长度等于16*n+m[其中m小于16]，除了NoPadding填充之外的任何方式，加密数据长度都等于16*(n+1)；NoPadding填充情况下，CBC、ECB和PCBC三种模式是不支持的，CFB、OFB两种模式下则加密数据长度等于原始数据长度。


RSA ―― 非对称加密

