【算法的基本描述方法】


算法描述是一个很严谨的事情

我们经常会遇到在算法计算过程中描述数组、vector的size计算的问题

如向上取整、向下取整、四舍五入等

向上取整,运算称为 Ceiling，用数学符号 「 （上有起止，开口向下）表示。

向下取整,运算称为 Floor，用数学符号 」 （下有起止，开口向上）表示。


四舍五入：更接近自己的整数； 把小数点后面的数字四舍五入
即：如被舍去部分的头一位数字小于五，则舍去; 如大于等于五，则被保留部分的最后一位数字加1
向上取整：比自己大的最小整数；
向下取整：比自己小的最大整数；


数组下标对半分 (p+q)/2

向上取整：ceil{(p+q)/2}
奇数个数就是中间的值的下标
偶数个数就是中间偏右的值的下标


向下取整：floor{(p+q)/2}
奇数个数就是中间的值的下标
偶数个数就是中间偏左的值的下标

四舍五入：(p+q+1)/2
对于都是整数来说，与ceil效果一致


C语言中，#include <math.h>

四舍五入取整：round()； 
向上取整，有小数就加1：ceil()； 
向下取整：floor() 或者强制转换（int）1.5。


边界条件处理是算法很重要的一部分



【算法的分类】
动态规划 —— 斐波拉契、路径搜索
贪婪算法
DFS
BFS



【基本数据结构】
位运算

数组式hash  —— 利用数组索引（或者简单变形）直接映射

链表操作  —— 合并链表、链表环检测、删除倒数第K个元素

二叉树



C以外语言处理较简单，手撕困难

堆  ——  TopK问题

栈  ——  括号匹配










【栈 C++】
c++  stl栈stack的头文件为:
#include <stack> 

c++ stl栈stack的成员函数介绍

操作 比较和分配堆栈

stack<int> st 初始化

empty() 堆栈为空则返回真

pop() 移除栈顶元素 （删除）

push() 在栈顶增加元素 （增加）

size() 返回栈中元素数目

top() 返回栈顶元素，不删除（获取）

栈（stack）是限制插入和删除只能在一个位置上进行的线性表，该位置在表的末端，叫做栈顶。
添加元素只能在尾节点后添加，删除元素只能删除尾节点，查看节点也只能查看尾节点。
添加、删除、查看依次为入栈（push）、出栈（pop）、栈顶节点（top）。
形象的说，栈是一个先进后出（LIFO）表，先进去的节点要等到后边进去的节点出来才能出来。